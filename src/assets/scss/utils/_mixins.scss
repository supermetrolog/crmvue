@use 'variables';
@use "sass:string";

$sizes: (
        "xs": 320px,
        "sm": 576px,
        "md": 768px,
        "lg": 992px,
        "xl": 1200px,
        "xxl": 1400px,
        'ultra': 1920px
);

@mixin media($minmax, $media) {
    @each $size, $resolution in $sizes {
        @if $media==$size {
            @media only screen and (#{$minmax}-width: $resolution) {
                @content;
            }
        }
    }
}

@mixin black-header {
    background-color: #333333;
    color: variables.$color_light;
    padding: 1em;
}

@mixin modal-width($modal-name, $width) {
    .#{$modal-name} .modal__container {
        width: $width;
    }
}

@mixin text-overflow($row-count: 1, $break: break-word) {
    text-overflow: ellipsis;
    max-width: 100%;
    display: -webkit-box;
    -webkit-line-clamp: $row-count;
    -webkit-box-orient: vertical;
    overflow: hidden;
    word-break: $break;
}

@mixin flex-box($a: none, $j: none, $gap: none, $d: none, $wrap: none) {
    display: flex;

    @if ($a != none) {
        align-items: $a;
    }
    @if ($j != none) {
        justify-content: $j;
    }
    @if ($gap != none) {
        gap: $gap;
    }
    @if ($d != none) {
        flex-direction: $d;
    }
    @if ($wrap != none) {
        flex-wrap: wrap
    }
}

@mixin light-border() {
    border: 1px solid rgba(0, 0, 0, .1);
}

@mixin clear-button() {
    outline: none;

    &:not([disabled]) {
        cursor: pointer;
    }
}

@mixin hover {
    &:not([disabled]):not(.disabled):hover {
        @content;
    }
}

@function propertiesToTransition($args) {
    $transition-list: "";

    @each $property, $duration, $func in $args {
        $_duration: .3s;
        $_func: ease;
        @if ($duration) {
            $_duration: $duration
        }
        @if ($func) {
            $_func: $func
        }

        @if (string.length($transition-list) > 0) {
            $transition-list: $transition-list + ", ";
        }

        $transition-list: $transition-list + "#{$property} #{$_duration} #{$_func}";
    }

    @return string.unquote($transition-list);
}

@mixin transition($args...) {
    transition: propertiesToTransition($args);
}

@mixin bg-color-scheme($args...) {
    @each $style-name, $bg-color, $bg-hover-color, $color, $hover-color in $args {
        &--#{$style-name} {
            background-color: $bg-color;

            @if ($color) {
                color: $color;
            }

            @if ($bg-hover-color != none) {
                &:not(:disabled):not(.disabled):hover {
                    background-color: $bg-hover-color;

                    @if ($hover-color) {
                        color: $hover-color;
                    }
                }
            }
        }
    }
}

@mixin line-gradient-progress($from, $to: #fff, $percents: 70%) {
    background: -webkit-linear-gradient(90deg, $from, $to $percents);
    background: linear-gradient(90deg, $from, $to $percents);
}